/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

 import {LitElement, html, css} from 'lit';
 import { format, addMonths, subMonths , addDays, subDays
          ,startOfWeek} from 'date-fns';
//  const { format } = dateFns;

 /**
  * An example element.
  *
  * @slot - This element has a slot
  * @csspart button - The button
  */
  export class AppCalender extends LitElement {
   static get styles() {
     return css`
     .icon {
        font-family: 'Material Icons', serif;
        font-style: normal;
        display: inline-block;
        vertical-align: middle;
        line-height: 1;
        text-transform: none;
        letter-spacing: normal;
        word-wrap: normal;
        white-space: nowrap;
        direction: ltr;
      
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        font-feature-settings: 'liga';
      }
      
      
    
      
      
      /* GENERAL */
      
      * {
        box-sizing: border-box;
      }
      
      :host {
          font-family: 'Open Sans', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
          font-size: 1em;
          font-weight: 300;
          line-height: 1.5;
          color: var(--text-color);
          background: var(--bg-color);
          position: relative;
      }
      
      .header {
        display: block;
        width: 100%;
        padding: 1.75em 0;
        border-bottom: 1px solid var(--border-color);
        background: var(--neutral-color);
      }
      
      .header #logo {
        font-size: 175%;
        text-align: center;
        color: var(--main-color);
        line-height: 1;
      }
      
      .header #logo .icon {
        padding-right: .25em;
      }
      
      .main {
        display: block;
        margin: 0 auto;
        margin-top: 5em;
        max-width: 50em;
      }
      
      
      /* GRID */
      
      .row {
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        width: 100%;
      }
      
      .row-middle {
        align-items: center;
      }
      
      .col {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
      }
      
      .col-start {
        justify-content: flex-start;
        text-align: left;
      }
      
      .col-center {
        justify-content: center;
        text-align: center;
      }
      
      .col-end {
        justify-content: flex-end;
        text-align: right;
      }
      
      
      /* Calendar */
      
      .calendar {
        display: block;
        position: relative;
        width: 100%;
        background: var(--neutral-color);
        border: 1px solid var(--border-color);
      }
      
      .calendar .header {
        text-transform: uppercase;
        font-weight: 700;
        font-size: 115%;
        padding: 1.5em 0;
        border-bottom: 1px solid var(--border-color);
      }
      
      .calendar .header .icon {
        cursor: pointer;
        transition: .15s ease-out;
      }
      
      .calendar .header .icon:hover {
        transform: scale(1.75);
        transition: .25s ease-out;
        color: var(--main-color);
      }
      
      .calendar .header .icon:first-of-type {
        margin-left: 1em;
      }
      
      .calendar .header .icon:last-of-type {
        margin-right: 1em;
      }
      
      .calendar .days {
        text-transform: uppercase;
        font-weight: 400;
        color: var(--text-color-light);
        font-size: 70%;
        padding: .75em 0;
        border-bottom: 1px solid var(--border-color);
      }
      
      .calendar .body .cell {
        position: relative;
        height: 5em;
        border-right: 1px solid var(--border-color);
        overflow: hidden;
        cursor: pointer;
        background: var(--neutral-color);
        transition: 0.25s ease-out;
      }
      
      .calendar .body .cell:hover {
        background: var(--bg-color);
        transition: 0.5s ease-out;
      }
      
      .calendar .body .selected {
        border-left: 10px solid transparent;
        border-image: linear-gradient(45deg, #1a8fff 0%,#53cbf1 40%);
        border-image-slice: 1;
      }
      
      .calendar .body .row {
        border-bottom: 1px solid var(--border-color);
      }
      
      .calendar .body .row:last-child {
        border-bottom: none;
      }
      
      .calendar .body .cell:last-child {
        border-right: none;
      }
      
      .calendar .body .cell .number {
        position: absolute;
        font-size: 82.5%;
        line-height: 1;
        top: .75em;
        right: .75em;
        font-weight: 700;
      }
      
      .calendar .body .disabled {
        color: var(--text-color-light);
        pointer-events: none;
      }
      
      .calendar .body .cell .bg {
        font-weight: 700;
        line-height: 1;
        color: var(--main-color);
        opacity: 0;
        font-size: 8em;
        position: absolute;
        top: -.2em;
        right: -.05em;
        transition: .25s ease-out;
        letter-spacing: -.07em;
      }
      
      .calendar .body .cell:hover .bg, .calendar .body .selected .bg  {
        opacity: 0.05;
        transition: .5s ease-in;
      }
      
      .calendar .body .col {
        flex-grow: 0;
        flex-basis: calc(100%/7);
        width: calc(100%/7);
      }
     `
   }
 
   static get properties() {
     return {
       /**
        * The name to say "Hello" to.
        */
       name: {type: String},
 
       /**
        * The number of times the button has been clicked.
        */
       count: {type: Number},

       currentMonth: {type: Object},

       selectedDate: {type: Object}
     };
   }
 
   constructor() {
     super();
     this.name = 'World';
     this.count = 0;
     this.currentMonth = new Date();
     this.selectedDate = new Date();
   }

    headerTemplate() {
      const dateFormat = "MMMM yyyy";
      return html`
        <div class="header row flex-middle">
          <div class="col col-start">
            <div class="icon" onClick="${this.prevMonth}">
              chevron_left
            </div>
          </div>
          <div class="col col-center">
            <span>
              ${format(this.currentMonth, dateFormat)}
            </span>
          </div>
          <div class="col col-end" onClick="${this.nextMonth}">
            <div class="icon">chevron_right</div>
          </div>
        </div>
      `;
    }

    daysTemplate() {
      const dateFormat = "EEEE";
      const days = [];
      let startDate = startOfWeek(this.currentMonth);
      for (let i = 0; i < 7; i++) {
        days.push(
          html`<div class="col col-center" key="${i}">
            ${format(addDays(startDate, i), dateFormat)}
          </div>`
        );
      }
      console.log(format(addDays(startDate,1), dateFormat));
      return html`<div class="days row">${days}</div>`;
    }

    cellsTemplate() {
      return html``;
    }

    onDateClick(day) {
    }

    nextMonth() {
      this.currentMonth = addMonths(this.currentMonth, 1);
    }

    prevMonth() {
      this.currentMonth = subMonths(this.currentMonth, 1);
    }



 
   render() {

     return html`
      <div class="calendar">
        ${this.headerTemplate()}
        ${this.daysTemplate()}
        <div>
        <div class="days row">
            <div class="col col-center" key="1">
                Sunday
            </div>
            <div class="col col-center" key="2">
                Monday
            </div>
            <div class="col col-center" key="3">
                Tuesday
            </div>
            <div class="col col-center" key="4">
                Wednesday
            </div>
            <div class="col col-center" key="5">
                Thusrday
            </div>
            <div class="col col-center" key="6">
                Friday
            </div>
            <div class="col col-center" key="7">
                Saturday
            </div>
        </div>
        <div class="body">
          <div class="row">
                <div class="col cell">
                <span class="number">3</span>
                <span class="bg">3</span>
            </div>
            <div class="col cell">
                <span class="number">3</span>
                <span class="bg">3</span>
            </div>
            <div class="col cell">
                <span class="number">3</span>
                <span class="bg">3</span>
            </div>
            <div class="col cell">
                <span class="number">3</span>
                <span class="bg">3</span>
            </div>
            <div class="col cell">
                <span class="number">3</span>
                <span class="bg">3</span>
            </div>
            <div class="col cell">
                <span class="number">3</span>
                <span class="bg">3</span>
            </div>
            <div class="col cell">
                <span class="number">3</span>
                <span class="bg">3</span>
            </div>
          </div>
          <div class="row">
            <div class="col cell">
              <span class="number">3</span>
              <span class="bg">3</span>
            </div>
            <div class="col cell">
              <span class="number">3</span>
              <span class="bg">3</span>
            </div>
          </div>
            
        </div>
        </div>
      </div>
     `;
   }
 
   _onClick() {
     this.count++;
   }
 }
 
 window.customElements.define('app-calender', AppCalender);
 

 /**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

 import {LitElement, html, css} from 'lit';
 import { format, addMonths, subMonths , addDays, subDays
          ,startOfWeek, endOfWeek, startOfMonth, endOfMonth
          , isSameDay, isSameMonth} from 'date-fns';
//  const { format } = dateFns;

 /**
  * An example element.
  *
  * @slot - This element has a slot
  * @csspart button - The button
  */
  export class AppCalender extends LitElement {
   static get styles() {
     return css`
     .icon {
        font-family: 'Material Icons', serif;
        font-style: normal;
        display: inline-block;
        vertical-align: middle;
        line-height: 1;
        text-transform: none;
        letter-spacing: normal;
        word-wrap: normal;
        white-space: nowrap;
        direction: ltr;
      
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        font-feature-settings: 'liga';
      }
      
      
    
      
      
      /* GENERAL */
      
      * {
        box-sizing: border-box;
      }
      
      :host {
          font-family: 'Open Sans', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
          font-size: 1em;
          font-weight: 300;
          line-height: 1.5;
          color: var(--text-color);
          background: var(--bg-color);
          position: relative;
      }
      
      .header {
        display: block;
        width: 100%;
        padding: 1.75em 0;
        border-bottom: 1px solid var(--border-color);
        background: var(--neutral-color);
      }
      
      .header #logo {
        font-size: 175%;
        text-align: center;
        color: var(--main-color);
        line-height: 1;
      }
      
      .header #logo .icon {
        padding-right: .25em;
      }
      
      .main {
        display: block;
        margin: 0 auto;
        margin-top: 5em;
        max-width: 50em;
      }
      
      
      /* GRID */
      
      .row {
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        width: 100%;
      }
      
      .row-middle {
        align-items: center;
      }
      
      .col {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
      }
      
      .col-start {
        justify-content: flex-start;
        text-align: left;
      }
      
      .col-center {
        justify-content: center;
        text-align: center;
      }
      
      .col-end {
        justify-content: flex-end;
        text-align: right;
      }
      
      
      /* Calendar */
      
      .calendar {
        display: block;
        position: relative;
        width: 100%;
        background: var(--neutral-color);
        border: 1px solid var(--border-color);
      }
      
      .calendar .header {
        text-transform: uppercase;
        font-weight: 700;
        font-size: 115%;
        padding: 1.5em 0;
        border-bottom: 1px solid var(--border-color);
      }
      
      .calendar .header .icon {
        cursor: pointer;
        transition: .15s ease-out;
      }
      
      .calendar .header .icon:hover {
        transform: scale(1.75);
        transition: .25s ease-out;
        color: var(--main-color);
      }
      
      .calendar .header .icon:first-of-type {
        margin-left: 1em;
      }
      
      .calendar .header .icon:last-of-type {
        margin-right: 1em;
      }
      
      .calendar .days {
        text-transform: uppercase;
        font-weight: 400;
        color: var(--text-color-light);
        font-size: 70%;
        padding: .75em 0;
        border-bottom: 1px solid var(--border-color);
      }
      
      .calendar .body .cell {
        position: relative;
        height: 5em;
        border-right: 1px solid var(--border-color);
        overflow: hidden;
        cursor: pointer;
        background: var(--neutral-color);
        transition: 0.25s ease-out;
      }
      
      .calendar .body .cell:hover {
        background: var(--bg-color);
        transition: 0.5s ease-out;
      }
      
      .calendar .body .selected {
        border-left: 10px solid transparent;
        border-image: linear-gradient(45deg, #1a8fff 0%,#53cbf1 40%);
        border-image-slice: 1;
      }
      
      .calendar .body .row {
        border-bottom: 1px solid var(--border-color);
      }
      
      .calendar .body .row:last-child {
        border-bottom: none;
      }
      
      .calendar .body .cell:last-child {
        border-right: none;
      }
      
      .calendar .body .cell .number {
        position: absolute;
        font-size: 82.5%;
        line-height: 1;
        top: .75em;
        right: .75em;
        font-weight: 700;
      }
      
      .calendar .body .disabled {
        color: var(--text-color-light);
        pointer-events: none;
      }
      
      .calendar .body .cell .bg {
        font-weight: 700;
        line-height: 1;
        color: var(--main-color);
        opacity: 0;
        font-size: 8em;
        position: absolute;
        top: -.2em;
        right: -.05em;
        transition: .25s ease-out;
        letter-spacing: -.07em;
      }
      
      .calendar .body .cell:hover .bg, .calendar .body .selected .bg  {
        opacity: 0.05;
        transition: .5s ease-in;
      }
      
      .calendar .body .col {
        flex-grow: 0;
        flex-basis: calc(100%/7);
        width: calc(100%/7);
      }
     `
   }
 
   static get properties() {
     return {
       /**
        * The name to say "Hello" to.
        */
       name: {type: String},
 
       /**
        * The number of times the button has been clicked.
        */
       count: {type: Number},

       currentMonth: {type: Object},

       selectedDate: {type: Object}
     };
   }
 
   constructor() {
     super();
     this.name = 'World';
     this.count = 0;
     this.currentMonth = new Date();
     this.selectedDate = new Date();
   }

    headerTemplate() {
      const dateFormat = "MMMM yyyy";
      return html`
        <div class="header row flex-middle">
          <div class="col col-start">
            <div class="icon" @click="${this.prevMonth}">
              chevron_left
            </div>
          </div>
          <div class="col col-center">
            <span>
              ${format(this.currentMonth, dateFormat)}
            </span>
          </div>
          <div class="col col-end" @click="${this.nextMonth}">
            <div class="icon">chevron_right</div>
          </div>
        </div>
      `;
    }

    daysTemplate() {
      const dateFormat = "EEEE";
      const days = [];
      let startDate = startOfWeek(this.currentMonth);
      for (let i = 0; i < 7; i++) {
        days.push(
          html`<div class="col col-center" key="${i}">
            ${format(addDays(startDate, i), dateFormat)}
          </div>`
        );
      }
      return html`<div class="days row">${days}</div>`;
    }

    cellsTemplate() {
      // const { currentMonth, selectedDate } = this.state;
      const monthStart = startOfMonth(this.currentMonth);
      const monthEnd = endOfMonth(monthStart);
      const startDate = startOfWeek(monthStart);
      const endDate = endOfWeek(monthEnd);

      const dateFormat = "d";
      const rows = [];

      let days = [];
      let day = startDate;
      let formattedDate = "";

      while (day <= endDate) {
        for (let i = 0; i < 7; i++) {
          formattedDate = format(day, dateFormat);
          const cloneDay = day;
          days.push(
            html`
            <div
              class="col cell ${
                !isSameMonth(day, monthStart)
                  ? "disabled"
                  : isSameDay(day, this.selectedDate) ? "selected" : ""
              }"
              key=${day}
              
            >
              <span class="number">${formattedDate}</span>
              <span class="bg">${formattedDate}</span>
            </div> 
            `
          );
          day = addDays(day, 1);
        }
        rows.push(
          html`
          <div class="row" key=${day}>
            ${days}
          </div>
          `
        );
        days = [];
      }

      return html`
        <div class="body">${rows}</div>
      `;
    }

    onDateClick(day) {
    }

    nextMonth() {
      this.currentMonth = addMonths(this.currentMonth, 1);
    }

    prevMonth() {
      this.currentMonth = subMonths(this.currentMonth, 1);
    }



 
   render() {
      console.log('render');
     return html`
      <div class="calendar">
        ${this.headerTemplate()}
        <div>
        ${this.daysTemplate()}
        ${this.cellsTemplate()}
        
            
        </div>
        </div>
      </div>
     `;
   }
 
   _onClick() {
     this.count++;
   }
 }
 
 window.customElements.define('app-calender', AppCalender);
 






 /**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

import {LitElement, html, css} from 'lit';
import { format, addMonths, subMonths , addDays, subDays
        ,startOfWeek, endOfWeek, startOfMonth, endOfMonth
        , isSameDay, isSameMonth} from 'date-fns';
//  const { format } = dateFns;

import './components/app-calendar-header';
import './components/app-calendar-content-header.js';
import './components/app-calendar-cell.js';
import './components/app-calendar-content.js';

/**
* An example element.
*
* @slot - This element has a slot
* @csspart button - The button
*/
export class AppCalendar extends LitElement {
  static get styles() {
    return css`
    app-calendar-header {
      --main-color: #1a8fff;
      --text-color: #777;
      --text-color-light: #ccc;
      --border-color: #eee;
      --bg-color: #f9f9f9;
      --neutral-color: #fff;
    }
    .icon {
        font-family: 'Material Icons', serif;
        font-style: normal;
        display: inline-block;
        vertical-align: middle;
        line-height: 1;
        text-transform: none;
        letter-spacing: normal;
        word-wrap: normal;
        white-space: nowrap;
        direction: ltr;
      
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        font-feature-settings: 'liga';
      }
      
      
    
      
      
      /* GENERAL */
      
      * {
        box-sizing: border-box;
      }
      
      :host {
          font-family: 'Open Sans', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
          font-size: 1em;
          font-weight: 300;
          line-height: 1.5;
          color: var(--text-color);
          background: var(--bg-color);
          position: relative;
      }
      
      .header {
        display: block;
        width: 100%;
        padding: 1.75em 0;
        border-bottom: 1px solid var(--border-color);
        background: var(--neutral-color);
      }
      
      .header #logo {
        font-size: 175%;
        text-align: center;
        color: var(--main-color);
        line-height: 1;
      }
      
      .header #logo .icon {
        padding-right: .25em;
      }
      
      .main {
        display: block;
        margin: 0 auto;
        margin-top: 5em;
        max-width: 50em;
      }
      
      
      /* GRID */
      
      .row {
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        width: 100%;
      }
      
      .row-middle {
        align-items: center;
      }
      
      .col {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
      }
      
      .col-start {
        justify-content: flex-start;
        text-align: left;
      }
      
      .col-center {
        justify-content: center;
        text-align: center;
      }
      
      .col-end {
        justify-content: flex-end;
        text-align: right;
      }
      
      
      /* Calendar */
      
      .calendar {
        display: block;
        position: relative;
        width: 100%;
        background: var(--neutral-color);
        border: 1px solid var(--border-color);
      }
      
      .calendar .header {
        text-transform: uppercase;
        font-weight: 700;
        font-size: 115%;
        padding: 1.5em 0;
        border-bottom: 1px solid var(--border-color);
      }
      
      .calendar .header .icon {
        cursor: pointer;
        transition: .15s ease-out;
      }
      
      .calendar .header .icon:hover {
        transform: scale(1.75);
        transition: .25s ease-out;
        color: var(--main-color);
      }
      
      .calendar .header .icon:first-of-type {
        margin-left: 1em;
      }
      
      .calendar .header .icon:last-of-type {
        margin-right: 1em;
      }
      
      .calendar .days {
        text-transform: uppercase;
        font-weight: 400;
        color: var(--text-color-light);
        font-size: 70%;
        padding: .75em 0;
        border-bottom: 1px solid var(--border-color);
      }
      
      .calendar .body .cell {
        position: relative;
        height: 5em;
        border-right: 1px solid var(--border-color);
        overflow: hidden;
        cursor: pointer;
        background: var(--neutral-color);
        transition: 0.25s ease-out;
      }
      
      .calendar .body .cell:hover {
        background: var(--bg-color);
        transition: 0.5s ease-out;
      }
      
      .calendar .body .selected {
        border-left: 10px solid transparent;
        border-image: linear-gradient(45deg, #1a8fff 0%,#53cbf1 40%);
        border-image-slice: 1;
      }
      
      .calendar .body .row {
        border-bottom: 1px solid var(--border-color);
      }
      
      .calendar .body .row:last-child {
        border-bottom: none;
      }
      
      .calendar .body .cell:last-child {
        border-right: none;
      }
      
      .calendar .body .cell .number {
        position: absolute;
        font-size: 82.5%;
        line-height: 1;
        top: .75em;
        right: .75em;
        font-weight: 700;
      }
      
      .calendar .body .disabled {
        color: var(--text-color-light);
        pointer-events: none;
      }
      
      .calendar .body .cell .bg {
        font-weight: 700;
        line-height: 1;
        color: var(--main-color);
        opacity: 0;
        font-size: 8em;
        position: absolute;
        top: -.2em;
        right: -.05em;
        transition: .25s ease-out;
        letter-spacing: -.07em;
      }
      
      .calendar .body .cell:hover .bg, .calendar .body .selected .bg  {
        opacity: 0.05;
        transition: .5s ease-in;
      }
      
      .calendar .body .col {
        flex-grow: 0;
        flex-basis: calc(100%/7);
        width: calc(100%/7);
      }
    `
  }

  static get properties() {
    return {
      /**
        * The name to say "Hello" to.
        */
      name: {type: String},

      /**
        * The number of times the button has been clicked.
        */
      count: {type: Number},

      currentMonth: {type: Object},

      selectedDate: {type: Object}
    };
  }

  constructor() {
    super();
    this.name = 'World';
    this.count = 0;
    this.currentMonth = new Date();
    this.selectedDate = new Date();

    this.nextMonth = this.nextMonth.bind(this);
    this.prevMonth = this.prevMonth.bind(this);
  }

  headerTemplate() {
    const dateFormat = "MMMM yyyy";
    return html`
      <div class="header row flex-middle">
        <div class="col col-start">
          <div class="icon" @click="${this.prevMonth}">
            chevron_left
          </div>
        </div>
        <div class="col col-center">
          <span>
            ${format(this.currentMonth, dateFormat)}
          </span>
        </div>
        <div class="col col-end" @click="${this.nextMonth}">
          <div class="icon">chevron_right</div>
        </div>
      </div>
    `;
  }

  daysTemplate() {
    const dateFormat = "EEEE";
    const days = [];
    let startDate = startOfWeek(this.currentMonth);
    for (let i = 0; i < 7; i++) {
      days.push(
        html`<div class="col col-center" key="${i}">
          ${format(addDays(startDate, i), dateFormat)}
        </div>`
      );
    }
    return html`<div class="days row">${days}</div>`;
  }

  cellsTemplate() {
    // const { currentMonth, selectedDate } = this.state;
    const monthStart = startOfMonth(this.currentMonth);
    const monthEnd = endOfMonth(monthStart);
    const startDate = startOfWeek(monthStart);
    const endDate = endOfWeek(monthEnd);

    const dateFormat = "d";
    const rows = [];

    let days = [];
    let day = startDate;
    let formattedDate = "";
    // console.log(typeof(monthStart));
    while (day <= endDate) {
      for (let i = 0; i < 7; i++) {
        formattedDate = format(day, dateFormat);
        const cloneDay = day;
        days.push(
          html`
          <div
            class="col cell ${
              !isSameMonth(day, monthStart)
                ? "disabled"
                : isSameDay(day, this.selectedDate) ? "selected" : ""
            }"
            key=${day}
            
          >
            <span class="number">${formattedDate}</span>
            <span class="bg">${formattedDate}</span>
          </div> 
          
          `
        );
        day = addDays(day, 1);
      }
      rows.push(
        html`
        <div class="row" key=${day}>
          ${days}
        </div>
        `
      );
      days = [];
    }

    return html`
      <div class="body">${rows}</div>
    `;
  }

  onDateClick(day) {
  }

  nextMonth() {
    this.currentMonth = addMonths(this.currentMonth, 1);
  }

  prevMonth() {
    this.currentMonth = subMonths(this.currentMonth, 1);
  }




  render() {
      console.log('render');
    return html`
      <div class="calendar">
        <app-calendar-header 
          .onPrevMonthClick="${this.prevMonth}"
          .onNextMonthClick="${this.nextMonth}"
          .currentMonth="${this.currentMonth}"
          ></app-calendar-header>
        <app-calendar-content .currentMonth="${this.currentMonth}" .selectedDate="${this.selectedDate}"></app-calendar-content>
        
      </div>
    `;
  }

  _onClick() {
    this.count++;
  }
}
 
window.customElements.define('app-calendar', AppCalendar);
 